1. Linear Search
Definition:
    Linear search is a simple search algorithm that checks each element in a list one by one until the target element is found or the end of the list is reached.

Use case: 
    Useful for small or unsorted arrays.

Rules:
    The list can be sorted or unsorted.
    Start from the first element and check one by one.
    Compare each element with the target.
    If found, return the position/index.
    If end of list is reached without a match, return "Not found".

#include <iostream>
using namespace std;

class LinearSearch {
    int arr[100], n;

public:
    void getInput() {
        cout << "Enter number of elements: ";
        cin >> n;
        cout << "Enter " << n << " elements:\n";
        for (int i = 0; i < n; i++)
            cin >> arr[i];
    }

    void searchElement(int key) {
        bool found = false;
        for (int i = 0; i < n; i++) {
            if (arr[i] == key) {
                cout << "Element " << key << " found at index " << i << endl;
                found = true;
                break;
            }
        }
        if (!found)
            cout << "Element not found.\n";
    }
};

int main() {
    LinearSearch ls;
    ls.getInput();
    int key;
    cout << "Enter element to search: ";
    cin >> key;
    ls.searchElement(key);
    return 0;
}
----------------------------------------------------------------------------------
2. Binary Search
Definition:
    Binary search is an efficient search algorithm that works on sorted arrays by repeatedly dividing the search interval in half, comparing the middle element with the target value.

Use case: 
    Faster than linear search for large, sorted datasets.

Rules:
    The array must be sorted (ascending or descending).
    Set low = 0, high = n - 1.
    Calculate mid = (low + high) / 2.
    If arr[mid] == key, element found.
    If arr[mid] < key, search in the right half (low = mid + 1).
    If arr[mid] > key, search in the left half (high = mid - 1).
    Repeat until found or low > high.

#include <iostream>
using namespace std;

class BinarySearch {
    int arr[100], n;

public:
    void getInput() {
        cout << "Enter number of elements: ";
        cin >> n;
        cout << "Enter " << n << " sorted elements:\n";
        for (int i = 0; i < n; i++)
            cin >> arr[i];
    }

    void searchElement(int key) {
        int low = 0, high = n - 1, mid;
        while (low <= high) {
            mid = (low + high) / 2;
            if (arr[mid] == key) {
                cout << "Element " << key << " found at index " << mid << endl;
                return;
            } else if (arr[mid] < key)
                low = mid + 1;
            else
                high = mid - 1;
        }
        cout << "Element not found.\n";
    }
};

int main() {
    BinarySearch bs;
    bs.getInput();
    int key;
    cout << "Enter element to search: ";
    cin >> key;
    bs.searchElement(key);
    return 0;
}
----------------------------------------------------------------------------------
3. Bubble Sort
Definition:
    Bubble sort is a basic sorting algorithm that repeatedly compares and swaps adjacent elements if they are in the wrong order, moving the largest values to the end in each pass.

Use case: 
    Easy to understand but not suitable for large data due to poor performance.

Rules:
    Works by repeatedly swapping adjacent elements if they are in the wrong order.
    After each pass, the largest unsorted element moves to the end.
    Outer loop runs n - 1 times for n elements.
    Inner loop compares arr[j] and arr[j+1], swaps if needed.
    If no swaps in a pass, array is already sorted.

#include <iostream>
using namespace std;

class BubbleSort {
    int arr[100], n;

public:
    void getInput() {
        cout << "Enter number of elements: ";
        cin >> n;
        cout << "Enter " << n << " elements:\n";
        for (int i = 0; i < n; i++)
            cin >> arr[i];
    }

    void sortArray() {
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1])
                    swap(arr[j], arr[j + 1]);
            }
        }
    }

    void display() {
        cout << "Sorted Array: ";
        for (int i = 0; i < n; i++)
            cout << arr[i] << " ";
        cout << endl;
    }
};

int main() {
    BubbleSort bs;
    bs.getInput();
    bs.sortArray();
    bs.display();
    return 0;
}
----------------------------------------------------------------------------------
4. Insertion Sort (Out of Syllabus)
Definition:
    Insertion Sort is a simple sorting algorithm that builds the sorted array one element at a time by inserting each new element into its correct position in the sorted portion.

Use case:
    Small datasets or partially sorted arrays.

Rules:
    Start from the second element (index 1), assuming the first element is sorted.
    Store the current element in a temporary variable.
    Compare it with elements in the sorted part of the array (left side).
    Shift elements that are greater than the current element to the right.
    Insert the current element at its correct position.
    Repeat for all elements.

#include <iostream>
using namespace std;

class InsertionSorter {
private:
    int arr[100], size;

public:
    // Function to input elements
    void input() {
        cout << "Enter the number of elements: ";
        cin >> size;
        cout << "Enter " << size << " elements:\n";
        for (int i = 0; i < size; i++) {
            cin >> arr[i];
        }
    }

    // Function to perform insertion sort
    void sort() {
        for (int i = 1; i < size; i++) {
            int current = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > current) {
                arr[j + 1] = arr[j];
                j--;
            }
            arr[j + 1] = current;
        }
    }

    // Function to display the sorted array
    void display() {
        cout << "Sorted array:\n";
        for (int i = 0; i < size; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
};

// Main Function
int main() {
    InsertionSorter sorter;
    sorter.input();
    sorter.sort();
    sorter.display();
    return 0;
}