Compile-Time Polymorphism

Example 1: Function Overloading (Calculator)
#include <iostream>
using namespace std;

class Calculator {
public:
    int add(int a, int b) {
        return a + b;
    }

    float add(float a, float b) {
        return a + b;
    }

    string add(string a, string b) {
        return a + b;
    }
};

int main() {
    Calculator c;
    cout << c.add(2, 3) << endl;           // 5
    cout << c.add(2.5f, 3.5f) << endl;     // 6.0
    cout << c.add("Hi ", "there") << endl; // Hi there
}

Example 2: Area Calculation (Overloading)
#include <iostream>
using namespace std;

class Area {
public:
    int calculate(int side) {
        return side * side; // Square
    }

    int calculate(int length, int breadth) {
        return length * breadth; // Rectangle
    }
};

int main() {
    Area a;
    cout << "Square Area: " << a.calculate(5) << endl;
    cout << "Rectangle Area: " << a.calculate(4, 6) << endl;
}

Example 3: Operator Overloading
#include <iostream>
using namespace std;

class Complex {
    int real, imag;
public:
    Complex(int r = 0, int i = 0) : real(r), imag(i) {}

    Complex operator + (Complex const &obj) {
        return Complex(real + obj.real, imag + obj.imag);
    }

    void display() {
        cout << real << " + " << imag << "i" << endl;
    }
};

int main() {
    Complex c1(3, 4), c2(1, 2);
    Complex c3 = c1 + c2;
    c3.display(); // 4 + 6i
}

Example 4: Notification System (Function Overloading)
#include <iostream>
using namespace std;

class Notification {
public:
    void send(string message) {
        cout << "Text: " << message << endl;
    }

    void send(string message, string email) {
        cout << "Email sent to " << email << ": " << message << endl;
    }

    void send(string message, int phone) {
        cout << "SMS sent to " << phone << ": " << message << endl;
    }
};

int main() {
    Notification notify;
    notify.send("Meeting at 5 PM");
    notify.send("Your bill is due", "user@example.com");
    notify.send("Package delivered", 9876543210);
}

Example 5: Temperature Conversion (Overloaded Functions)
#include <iostream>
using namespace std;

class Temperature {
public:
    float convert(float celsius) {
        return (celsius * 9/5) + 32; // to Fahrenheit
    }

    float convert(float value, bool isFahrenheit) {
        return isFahrenheit ? (value - 32) * 5/9 : (value * 9/5) + 32;
    }
};

int main() {
    Temperature t;
    cout << "30°C to F: " << t.convert(30) << endl;
    cout << "86°F to C: " << t.convert(86, true) << endl;
}