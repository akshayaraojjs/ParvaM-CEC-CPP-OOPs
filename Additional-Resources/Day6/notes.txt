What is Polymorphism?
    Polymorphism means "many forms." In C++, it allows functions or objects to behave differently based on context.

Types of Polymorphism:
Compile-time Polymorphism
    – Achieved using Function Overloading and Operator Overloading
    – Resolved at compile time

Run-time Polymorphism
    – Achieved using Inheritance and Virtual Functions
    – Resolved at runtime via dynamic binding

Compile-Time Polymorphism    
Function Overloading:

Example:

#include <iostream>
using namespace std;

class Print {
public:
    void show(int a) {
        cout << "Integer: " << a << endl;
    }

    void show(double b) {
        cout << "Double: " << b << endl;
    }

    void show(string c) {
        cout << "String: " << c << endl;
    }
};

int main() {
    Print p;
    p.show(5);
    p.show(3.14);
    p.show("Hello");
}

Real-Life Example:
    A "print" button prints text, image, or PDF based on file type.

Run-Time Polymorphism
Achieved Using:
    Inheritance
    Virtual functions
    Pointers or references of base class

Example: Virtual Function

#include <iostream>
using namespace std;

class Animal {
public:
    virtual void speak() {
        cout << "Animal speaks" << endl;
    }
};

class Dog : public Animal {
public:
    void speak() override {
        cout << "Dog barks" << endl;
    }
};

class Cat : public Animal {
public:
    void speak() override {
        cout << "Cat meows" << endl;
    }
};

int main() {
    Animal* a1;
    Dog d;
    Cat c;

    a1 = &d;
    a1->speak();  // Dog barks

    a1 = &c;
    a1->speak();  // Cat meows
}

Real-Life Example:
    A remote control (base class) operates different TV brands (derived classes) with same buttons but different internal responses.

Difference b/w Compile-time & Run-time Polymorphism:

| Feature              | Compile-Time Polymorphism       | Run-Time Polymorphism         |
| -------------------- | ------------------------------- | ----------------------------- |
| Method Used          | Function Overloading, Templates | Virtual Functions             |
| Binding Time         | Compile Time                    | Run Time                      |
| Flexibility          | Less Flexible                   | More Flexible                 |
| Inheritance Required | No                              | Yes                           |
| Performance          | Faster                          | Slightly slower due to vtable |

Why is Polymorphism Important?
    Promotes code reusability
    Simplifies maintenance and extension
    Enables interface design (multiple classes with common method names)
    Encourages loosely coupled systems

Use-case Example: Payment System

class Payment {
public:
    virtual void pay() {
        cout << "Processing generic payment" << endl;
    }
};

class CreditCard : public Payment {
public:
    void pay() override {
        cout << "Paid using Credit Card" << endl;
    }
};

class UPI : public Payment {
public:
    void pay() override {
        cout << "Paid using UPI" << endl;
    }
};

int main() {
    Payment* p;
    CreditCard cc;
    UPI upi;

    p = &cc; p->pay();  // Paid using Credit Card
    p = &upi; p->pay(); // Paid using UPI
}
---------------------------------------------------------------------------------------------------------------------------------------------------------
1. Compile-Time Polymorphism (Function Overloading)
Definition:
    Compile-time polymorphism allows functions with the same name to behave differently depending on their parameter list. It is resolved at compile time.

Function Overloading Example:
#include <iostream>
using namespace std;

class Calculator {
public:
    // Function to add two integers
    int add(int a, int b) {
        return a + b;
    }

    // Function to add three integers
    int add(int a, int b, int c) {
        return a + b + c;
    }

    // Function to add two floats
    float add(float a, float b) {
        return a + b;
    }
};

int main() {
    Calculator calc;
    cout << "Sum of 2 and 3: " << calc.add(2, 3) << endl;
    cout << "Sum of 1, 2 and 3: " << calc.add(1, 2, 3) << endl;
    cout << "Sum of 2.5 and 3.5: " << calc.add(2.5f, 3.5f) << endl;
}

2. Initialization List in C++
Definition:
    An initialization list is used in constructors to initialize class member variables before the constructor body executes.
    This is particularly useful for:
        Initializing const or reference variables
        Calling base class constructors
        Initializing complex members efficiently
Example:

#include <iostream>
using namespace std;

class Student {
    const int rollNo;
    string name;

public:
    // Initialization list
    Student(int r, string n) : rollNo(r), name(n) {}

    void display() {
        cout << "Roll No: " << rollNo << ", Name: " << name << endl;
    }
};

int main() {
    Student s1(101, "Alice");
    s1.display();
}

Why Use Initialization List?
    Ensures const members are initialized properly
    More efficient than assigning values in the constructor body

3. String Class in C++
    The std::string class in C++ provides a powerful and easy way to manipulate text.

Commonly used string methods:

| Method                   | Description                       |
| ------------------------ | --------------------------------- |
| `length()` / `size()`    | Returns the number of characters  |
| `append()`               | Adds to the end of the string     |
| `substr(start, len)`     | Returns substring                 |
| `find("str")`            | Finds the position of a substring |
| `replace(pos, len, str)` | Replaces part of the string       |
| `compare(str)`           | Compares two strings              |
| `c_str()`                | Returns C-style string            |

#include <iostream>
#include <string>
using namespace std;

int main() {
    string name = "John";
    string greet = "Hello ";

    // Concatenate
    string message = greet + name;
    cout << message << endl;

    // Append
    message.append("!");
    cout << "Appended: " << message << endl;

    // Length
    cout << "Length: " << message.length() << endl;

    // Substring
    cout << "Substring (0, 5): " << message.substr(0, 5) << endl;

    // Find
    int pos = message.find("John");
    cout << "Position of 'John': " << pos << endl;

    // Replace
    message.replace(6, 4, "Mike");
    cout << "After Replace: " << message << endl;

    return 0;
}

Summary:

| Concept                  | Key Idea                                                        |
| ------------------------ | --------------------------------------------------------------- |
| Function Overloading     | Same function name with different parameter sets (compile-time) |
| Initialization List      | Initializes class members before constructor body               |
| String Class             | Easy text handling with built-in methods in `std::string`       |
